package com.malware.tracelisteners.messaging;

import java.util.Hashtable;
import javax.jms.ConnectionFactory;
import javax.jms.Destination;
import javax.naming.Context;
import javax.naming.InitialContext;
import org.apache.activemq.artemis.jndi.ActiveMQInitialContextFactory;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class EnvironmentAmqConnectionProvider implements AmqConnectionProvider {

    private static final Logger LOGGER = LoggerFactory.getLogger(EnvironmentAmqConnectionProvider.class);
    private static final String CONFIG_URL_KEY = "amq-url";
    private static final String JNDI_CONNECTION_FACTORY = "RemoteJmsXA";
    private static final String JNDI_PROCESS_EVENTS_QUEUE = "ProcessEventQueue";


    private ConnectionFactory factory;
    private InitialContext ctx;
    private String url;

    public EnvironmentAmqConnectionProvider() throws Exception {
        url = System.getenv(CONFIG_URL_KEY);
        Hashtable<Object, Object> env = new Hashtable<>();

        env.put(Context.INITIAL_CONTEXT_FACTORY, ActiveMQInitialContextFactory.class.getName());
        env.put(Context.PROVIDER_URL, url);
        env.put("queue.TestQueue", JNDI_PROCESS_EVENTS_QUEUE);
        LOGGER.info("Env = " + env.toString());

        ctx = new InitialContext(env);
        factory = (ConnectionFactory) ctx.lookup(JNDI_CONNECTION_FACTORY);
    }

    @Override
    public ConnectionFactory getConnectionFactory() {
        return factory;
    }

    @Override
    public Destination getProcessEventQueue() throws Exception {
        return (Destination) ctx.lookup(JNDI_PROCESS_EVENTS_QUEUE);
    }

}
